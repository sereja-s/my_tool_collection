// JavaScript может использоваться в браузере, на веб-сервере или в какой-то другой среде, даже в кофеварке. Каждая
// среда предоставляет свою функциональность, которую спецификация JavaScript называет окружением

// Окружение предоставляет свои объекты и дополнительные функции, в дополнение базовым языковым

// Ниже в общих чертах показано, что доступно для JavaScript в браузерном окружении:

//                                    window
// DOM                                   BOM                                     JavaScript
// -document                          -navigator                                 -Object
//   ...                               -screen                                    -Array
//                                    -location                                  -Function
//                                    -frames                                       ...
//                                    -history
//                                    -XMLHttpRequest

// Как мы видим, имеется корневой объект window, который выступает в 2 ролях:

// -Во-первых, это глобальный объект для JavaScript-кода, об этом более подробно говорится в главе Глобальный объект.
// -Во-вторых, он также представляет собой окно браузера и располагает методами для управления им

// DOM (Document Object Model)

// Document Object Model, сокращённо DOM – объектная модель документа, которая представляет все содержимое страницы в
// виде объектов, которые можно менять.

// Объект document – основная «входная точка». С его помощью мы можем что-то создавать или менять на странице

//-----------------------------------------------------------------------------------------------------------------//

// BOM (Browser Object Model)

// Объектная модель браузера (Browser Object Model, BOM) – это дополнительные объекты, предоставляемые браузером (окружением), чтобы работать со всем, кроме документа.

// Например:
// -Объект navigator даёт информацию о самом браузере и операционной системе. Среди множества его свойств самыми
// известными являются: navigator.userAgent – информация о текущем браузере, и navigator.platform – информация о
// платформе (может помочь в понимании того, в какой ОС открыт браузер – Windows/Linux/Mac и так далее).
// -Объект location позволяет получить текущий URL и перенаправить браузер по новому адресу.
// Вот как мы можем использовать объект location:

/*
alert(location.href); // показывает текущий URL
if (confirm("Перейти на Wikipedia?")) {
	location.href = "https://wikipedia.org"; // перенаправляет браузер на другой URL
}
 */

// Функции alert/confirm/prompt тоже являются частью BOM: они не относятся непосредственно к странице, но представляют
// собой методы объекта окна браузера для коммуникации с пользователем

//--------------------------------------------------------------------------------------------------------------------//

// DOM-дерево

// Основой HTML-документа являются теги.

// В соответствии с объектной моделью документа («Document Object Model», коротко DOM), каждый HTML-тег является
// объектом. Вложенные теги являются «детьми» родительского элемента. Текст, который находится внутри тега, также является объектом.

// Все эти объекты доступны при помощи JavaScript, мы можем использовать их для изменения страницы

// Теги являются узлами-элементами (или просто элементами). Они образуют структуру дерева: <html> – это корневой узел, <head> и <body> его дочерние узлы и т.д.
// Текст внутри элементов образует текстовые узлы, обозначенные как #text. Текстовый узел содержит в себе только строку
// текста. У него не может быть потомков, т.е. он находится всегда на самом нижнем


// Автоисправление

// Если браузер сталкивается с некорректно написанным HTML-кодом, он автоматически корректирует его при построении DOM



// Все, что есть в HTML, даже комментарии, является частью DOM.

// Даже директива <!DOCTYPE...>, которую мы ставим в начале HTML, тоже является DOM-узлом. Она находится в дереве DOM
// прямо перед <html>. Мы не будем рассматривать этот узел, мы даже не рисуем его на наших диаграммах, но он существует.

// Даже объект document, представляющий весь документ, формально является DOM-узлом.

// Существует 12 типов узлов. Но на практике мы в основном работаем с 4 из них:
// -document – «входная точка» в DOM.
// -узлы-элементы – HTML-теги, основные строительные блоки.
// -текстовые узлы – содержат текст.
// -комментарии – иногда в них можно включить информацию, которая не будет показана, но доступна в DOM для чтения JS


//===================================================================================================================//

// Навигация по DOM-элементам

//DOM позволяет нам делать что угодно с элементами и их содержимым, но для начала нужно получить соответствующий DOM-объект.

// Все операции с DOM начинаются с объекта document. Это главная «точка входа» в DOM. Из него мы можем получить доступ к любому узлу.

// Так выглядят основные ссылки, по которым можно переходить между узлами DOM:

//                             document

//                 document.documentElement < HTML >

//	                         document.body
//                         (if inside body)
//------------------------------------------------------------------//

//                             parentNode

// previousSibling               < DIV >               nextSibling
//                              childNodes

//                   firstChild            lastChild

// Поговорим об этом подробнее.

// Сверху: documentElement и body

// Самые верхние элементы дерева доступны как свойства объекта document: <html> = document.documentElement
// (Самый верхний узел документа: document.documentElement. В DOM он соответствует тегу <html>)

// получим объект html со всем его содержимым:
const htmlElement = document.documentElement;

// <body> = document.body
// Другой часто используемый DOM-узел – узел тега <body>: document.body.

// получим объект body со всем его содержимым:
const bodyElement = document.body;

// <head> = document.head
// Тег <head> доступен как document.head

// получим объект body со всем его содержимым:
const headElement = document.head;

console.log(htmlElement);
console.log(bodyElement);
console.log(headElement);


