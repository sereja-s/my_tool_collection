"use strict" // или 'use strict'- подключаем новые возможности языка Java Script (выше этой записи допускаются только комментарии)

// №4- Как работает js 

console.log('Hello world!- урок_1')

//===================================================================================================================//

// №5- Основы синтаксиса JavaScript

// точка с запятой:
console.log('Учим');
console.log('JavaScript- урок_2');

// Инструкции в JS:

// 1) значения (values):
//    1.1- фиксированные значения (литералы):
//         25-  литерал целого числа
//         25.8-        дробного числа
//         'JavaScript'-  строки
//         "JavaScript"-  строки
//         []-           массива
//         [15, 7, 89]-  массива
//         {}-          объекта
//         {
//            name: 'Site',
//            surname: 'Postroen
//         }-            объекта
//         (ab|bc)-           регулярного выражения

//    1.2- контанты и переменные (используются для хранения значений данных):
//         const MAX_VALUE = 17;

//         var section = 'JS';
//	        let arr = ['HTML', 'CSS', 'JS'];

// 2) операторы (означают операцию которую нужно выполнить):
//           пример сложения двух строк (конкатенация строк):
console.log('оператор сложения в ' + 'JS');

// 3) выражения (комбинация значений и переменных):
let num = 4; // выражение присваивания
console.log(num);

'Учим' + 'JS' // выражение возвращает значение без присваивания


// 4) ключевые слова (указывается в начале инструкции, показывает какое действие JS необходимо выполнить):
let num1 // укзывает браузеру создать переменную

//  Блок инструкций внутри фигурных скобок {...}, используется в функциях, циклах и т.д.
function name() {
	console.log('блок из 2-х инструкций');
	console.log('внутри функции');
}
name(); // вызов функции

// 5) комментарии (часть кода, которая не выполняется):

// однострочный комментарий,

/*
	многострочный комментарий
*/

//---------------------------------------------------------------------------------------------------------------//

// ЧУВСТВИТЕЛЬНОСТЬ К РЕГИСТРУ (ключевые слова, переменные, имена функций и др. идентификаторы должны содержать
// одинаковые наборы прописных и строчных букв)

//-----------------------------------------------------------------------------------------------------------------//

// ПРОБЕЛЫ
// рекомендуется добавлять, что бы сделать код более читаемым (несколько пробелов подряд игнорирутся);
// принято размещать пробелы вокруг операторов ( = , +, - и т.д.)

//------------------------------------------------------------------------------------------------------------------//

// ДЛИНА СТРОКИ (рекомендуется не более 80 символов, затем разорвать (часто после применения операторов, например: присваивания))
document.getElementById('text').innerHTML =
	'Текст этого поля';

//====================================================================================================================//

// №6- Переменные в JAVASCRIPT. Константы. Ключевые слова LET CONST VAR

// верное объявление переменной:
let age;
let info123;
let $size;
let _color;

// НЕ верное:
// let 132info;
// let my-age;

//--------------------------------------------------------------------------------------------------------------------//

// именование переменной(рекомендуется- говорящее о содержимом) если имя состоит из нескольких слов, то используем стиль:
// lowerCamelCase (когда каждое слово кроме 1-го начинается с заглавной буквы)

//---------------------------------------------------------------------------------------------------------------------//

// нельзя использовать зарезервированные имена:

// let let;
// let for;
// let break;

//--------------------------------------------------------------------------------------------------------------------//

// присваивание значения

let myLifeStyle; // объявление переменой без значения
myLifeStyle = 'freelance'; // присваивание ей значения

// или 

let mls = 'freelance+love'; // объявление переменой и присваивание ей значения

console.log(myLifeStyle);
console.log(mls);

//--------------------------------------------------------------------------------------------------------------------//

// Объявление нескольких переменных:

// 1) в строку через запятую:
let myName = 'СайтПостроен', myAge = 1, myMessage = 'Живи, а работай в свободное время!';

// 2) через запятую с новой строки:
let myName2 = 'СайтПостроен2',
	myAge2 = 2,
	myMessage2 = 'Живи, а работай в свободное время! Живи, а работай в свободное время!';

// 3) отдельно:
let myName3 = 'СайтПостроен3';
let myAge3 = 3;
let myMessage3 = 'Живи, а работай в свободное время! Живи, а работай в свободное время! Живи, а работай в свободное время!';

// если строгий режим ("use strict") включён, то объяление переменной без ключевого слова: let впереди, вызовет ошибку

//youAge = 363;
//console.log(youAge);

//--------------------------------------------------------------------------------------------------------------------//

// Изменение значения переменной:

let myAge4 = 4;
console.log(myAge4);

myAge4 = 120;
console.log(myAge4);

// Передача значений переменных

let myAge5 = 99;
console.log(myAge5);

let myNewAge = 150;

myAge5 = myNewAge; // передали(присвоили) значение одной переменной другой переменной
console.log(myAge5);

//-------------------------------------------------------------------------------------------------------------------//

// Область видимости переменной

// 1) Переменная объявленная внутри блока, видна только внутри этого блока (и не видна за его пределами):
function testBlock() {

	let myAge = 101;
	console.log(myAge);
}
testBlock();

// 2) Переменные с одинаковыми названиями(именами) внутри блока и за его пределами- это разные переменые

let myAgeTest = 100;

function testBlockTest() {

	let myAgeTest = 105;
	console.log(myAgeTest);
}
testBlockTest();

console.log(myAgeTest);

// 3) в рамках одного блока переменную можно использовать, только после её объявления

// 4) повторное объявление переменной в рамках одного блока запрещено
let newAge = 18;
// let newAge = 15; -ошибка (переменная уже объявлена)

// но изменить значение уже объявленной переменной можем:
newAge = 15;
console.log(newAge);

//--------------------------------------------------------------------------------------------------------------------//

// Константы (изменять значения нельзя)

// имена констант с заранее извесными (заданными) значениями записываются в верхнем регистре, а слова разделяются нижним подчёркиванием:
const BLOCK_SIZE = 25;

// имена констант со значением присвоенным в процессе выполнения программы, записываются как у переменых:
const summSize = 25 + 30;

// Допускается изменять значения констант внутри определённых типов данных (объекта, массива и др. объектных значений):

// здесь тип данных константы: объект
const userProfile = {

	name: 'Фрилансер',
	age: 36,
	message: 'Живи, а работай в свободное время!'
}
console.log(userProfile);
// далее меняем значение одного из полей объекта:
userProfile.age = 18;
// ошибки не будет данные изменились
console.log(userProfile);

//--------------------------------------------------------------------------------------------------------------------//

// Объявление с помощью ключевого слова var активно применялось до 2015 года, до появления let и const

// Отличия:

// 1) переменную можно использовать до её объявления с помощъю кл.слова var (независимо от того включён ли строгий режимм):

ageGirl = 25;
console.log(ageGirl);

var ageGirl; // ошибки не будет

// 2) переменная объявленная с помощъю кл.слова var внутри блока- функции, также не будет видна за пределами функции,
// но если в качестве блока выступает условие (например: if), то будет видна и за его пределами (тоже самое для циклов и др. подобных блоков)
