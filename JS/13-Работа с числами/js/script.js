// Числа

// В современном JavaScript существует два типа чисел:

// - Обычные числа в JavaScript хранятся в 64-битном формате IEEE-754, который также называют «числа с плавающей точкой
// двойной точности» (числа типа number) Десятичные числа записываются через точку

// -BigInt числа дают возможность работать с целыми числами произвольной длины. Они нужны достаточно редко и
// используются в случаях, когда необходимо работать со значениями более чем (253-1) или менее чем -(253-1).


// Способы записи числа

// Представьте, что нам надо записать число 1 миллиард. Самый очевидный путь:
let billion = 1000000000;

// В JavaScript можно использовать букву "e", чтобы укоротить запись числа. Она добавляется к числу и заменяет указанное количество нулей:

let billion2 = 1e9;  // 1 миллиард, буквально: 1 и 9 нулей

let num = 7.3e9;
console.log(num);  // 7.3 миллиардов (7,300,000,000)


// Другими словами, "e" производит операцию умножения числа на 1 с указанным количеством нулей.


/* 
1e3 = 1 * 1000
1.23e6 = 1.23 * 1000000 
*/

// Сейчас давайте запишем что-нибудь очень маленькое. К примеру, 1 микросекунду (одна миллионная секунды):

let ms = 0.000001;
//Записать микросекунду в укороченном виде нам поможет "e".

let ms2 = 1e-6; // шесть нулей, слева от 1
//Если мы подсчитаем количество нулей 0.000001, их будет 6.


// Другими словами, отрицательное число после "e" подразумевает деление на 1 с указанным количеством нулей:


// 1 делится на 1 с 3 нулями
// 1e-3 = 1 / 1000 = 0.001

// 1.23 делится на 1 с 6 нулями
// 1.23e-6 = 1.23 / 1000000 = 0.00000123

//-------------------------------------------------------------------------------------------------------------------//

// toString(base)

// Метод num.toString(base) возвращает строковое представление числа num в системе счисления base.

// Например:

let num2 = 255;

console.log(num2.toString(16));  // ff
console.log(num2.toString(2));   // 11111111

// base может варьироваться от 2 до 36 (по умолчанию 10). Часто используемые:

// - base=16 — для шестнадцатеричного представления цвета, кодировки символов и т.д., цифры могут быть 0..9 или A..F.

// - base=2 — обычно используется для отладки побитовых операций, цифры 0 или 1.

// - base=36 — максимальное основание, цифры могут быть 0..9 или A..Z. То есть, используется весь латинский алфавит для
// представления числа. Забавно, но можно использовать 36-разрядную систему счисления для получения короткого
// представления большого числового идентификатора. К примеру, для создания короткой ссылки. Для этого просто
// преобразуем его в 36-разрядную систему счисления:

console.log(123456..toString(36)); // 2n9c

// Две точки для вызова метода
// Внимание! Две точки в 123456..toString(36) это не опечатка.Если нам надо вызвать метод непосредственно на числе, как
// toString в примере выше, то нам надо поставить две точки..после числа.

// Если мы поставим одну точку: 123456.toString(36), тогда это будет ошибкой, поскольку синтаксис JavaScript
// предполагает, что после первой точки начинается десятичная часть.А если поставить две точки, то JavaScript понимает, что десятичная часть отсутствует, и начинается метод.

// Также можно записать как(123456).toString(36)

//--------------------------------------------------------------------------------------------------------------------//

//Округление

// Одна из часто используемых операций при работе с числами – это округление.

// В JavaScript есть несколько встроенных функций для работы с округлением:

// Math.floor
// Округление в меньшую сторону: 3.1 становится 3, а -1.1 — -2.

// Math.ceil
// Округление в большую сторону: 3.1 становится 4, а -1.1 — -1.

// Math.round
// Округление до ближайшего целого: 3.1 становится 3, 3.6 — 4, а -1.1 — -1.

// Math.trunc (не поддерживается в Internet Explorer)
// Производит удаление дробной части без округления: 3.1 становится 3, а -1.1 — -1



// Если нам надо округлить число до n-ого количества цифр в дробной части есть два пути решения:

// 1) Умножить и разделить.
// Например, чтобы округлить число до второго знака после запятой, мы можем умножить число на 100, вызвать функцию округления и разделить обратно.

let num3 = 1.23456;

console.log(Math.floor(num3 * 100) / 100); // 1.23456 -> 123.456 -> 123 -> 1.23


// 2) Метод toFixed(n) округляет число до n знаков после запятой и возвращает строковое представление результата.
let num4 = 12.34;
console.log(num4.toFixed(1)); // "12.3"
// Округляет значение до ближайшего числа, как в большую, так и в меньшую сторону, аналогично методу Math.round:

let num5 = 12.36;
console.log(num5.toFixed(1)); // "12.4"
// Обратите внимание, что результатом toFixed является строка. Если десятичная часть короче, чем необходима, будут добавлены нули в конец строки:

let num6 = 12.34;
console.log(num6.toFixed(5)); // "12.34000", добавлены нули, чтобы получить 5 знаков после запятой

// Мы можем преобразовать полученное значение в число, используя унарный оператор + или Number()

// пример с унарным оператором: 
console.log(+num6.toFixed(5)); // 12.34

//--------------------------------------------------------------------------------------------------------------------//

// Наиболее часто встречающаяся ошибка при работе с числами в JavaScript – это потеря точности

let sourseNum = 1.005;
let numFour = Math.round(sourseNum * 100) / 100;
console.log(numFour); // 1

// для понимания выведем на экран каждую часть выражения(результат) по отдельности:
console.log(sourseNum * 100); // 100.49999999999999
console.log(Math.round(sourseNum * 100)); // 100

// Убираем потерю неточности с помощью Number.EPSILON (т.е. объект: Number и его свойство: EPSILON)

// Свойство Number.EPSILON представляет значение, являющееся разницей между 1 и следующим значением с плавающей запятой,
// которое больше 1. Другими словами, Number.EPSILON является значением, обеспечивающим точность вычислений для чисел с плавающей запятой

// добавим его к нашему числу и получим результат с необходимой нам точностью
let sourseNum2 = 1.005 + Number.EPSILON;
let numFour2 = Math.round(sourseNum2 * 100) / 100;
console.log(numFour2); // 1.01

//-------------------------------------------------------------------------------------------------------------------//

// Проверка: isFinite и isNaN

// Помните эти специальные числовые значения?

// Infinity (и -Infinity) — особенное численное значение, которое ведёт себя в точности как математическая бесконечность ∞. NaN представляет ошибку. Эти числовые значения принадлежат типу number, но они не являются «обычными» числами, поэтому есть функции для их проверки:

// 1) isNaN(value) преобразует значение в число и проверяет является ли оно NaN:

console.log(isNaN(NaN)); // true
console.log(isNaN("str")); // true
// Нужна ли нам эта функция? Разве не можем ли мы просто сравнить === NaN? К сожалению, нет. Значение NaN уникально тем,
// что оно не является равным ничему другому, даже самому себе:
console.log(NaN === NaN); // false

// 2) isFinite(value) преобразует аргумент в число и возвращает true, если оно является обычным числом, т.е. не NaN/Infinity/-Infinity:

console.log(isFinite("15")); // true
console.log(isFinite("str")); // false, потому что специальное значение: console.log(isFinite(Infinity)); // false, потому что специальное значение: Infinity

// Иногда isFinite используется для проверки, содержится ли в строке число:

//let num7 = +prompt("Enter a number", '');
// вернёт true всегда, кроме ситуаций, когда аргумент - Infinity/-Infinity или не число
//console.log(isFinite(num7));

// Помните, что пустая строка интерпретируется как 0 во всех числовых функциях, включая isFinite.

//==================================================================================================================//

// parseInt и parseFloat

// Для явного преобразования к числу можно использовать + или Number(). Если строка не является в точности числом, то результат будет NaN:

console.log(+"100px"); // NaN
// (Единственное исключение — это пробелы в начале строки и в конце, они игнорируются.)

// В реальной жизни мы часто сталкиваемся со значениями у которых есть единица измерения, например "100px" или "12pt" в
// CSS. Также во множестве стран символ валюты записывается после номинала "19€". Так как нам получить числовое значение из таких строк?

// Для этого есть parseInt и parseFloat.

// Они «читают» число из строки. Если в процессе чтения возникает ошибка, они возвращают полученное до ошибки число.
// Функция parseInt возвращает целое число, а parseFloat возвращает число с плавающей точкой:

console.log(parseInt('100px')); // 100
console.log(parseFloat('12.5em')); // 12.5

console.log(parseInt('12.3')); // 12, вернётся только целая часть
console.log(parseFloat('12.3.4')); // 12.3, произойдёт остановка чтения на второй точке

// Функции parseInt/parseFloat вернут NaN, если не смогли прочитать ни одну цифру:
console.log(parseInt('a123')); // NaN, на первом символе происходит остановка чтения


// Второй аргумент parseInt(str, radix)

// Функция parseInt() имеет необязательный второй параметр. Он определяет систему счисления, таким образом parseInt
// может также читать строки с шестнадцатеричными числами, двоичными числами и т.д.:

console.log(parseInt('0xff', 16)); // 255
console.log(parseInt('ff', 16)); // 255, без 0x тоже работает
console.log(parseInt('2n9c', 36)); // 123456

//=====================================================================================================================//

// Другие математические функции

// В JavaScript встроен объект Math, который содержит различные математические функции и константы.

// Несколько примеров:

// 1) Math.random()
// Возвращает псевдослучайное число в диапазоне от 0 (включительно) до 1 (но не включая 1)
console.log(Math.random()); // ... (любое количество псевдослучайных чисел)
console.log(Math.random()); // ... (любое количество псевдослучайных чисел)
console.log(Math.random()); // ... (любое количество псевдослучайных чисел)

// 2) Math.max(a, b, c...) / Math.min(a, b, c...)
// Возвращает наибольшее/наименьшее число из перечисленных аргументов.

console.log(Math.max(3, 5, -10, 0, 1)); // 5
console.log(Math.min(1, 2)); // 1

// 3) Math.pow(n, power)
// Возвращает число n, возведённое в степень power

console.log(Math.pow(2, 10)); // 2 в степени 10 = 1024

//В объекте Math есть множество функций и констант, включая тригонометрические функции, подробнее можно ознакомиться в документации по объекту Math