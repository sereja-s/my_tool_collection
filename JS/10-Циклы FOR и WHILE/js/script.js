/*
Циклы while и for
При написании скриптов зачастую встаёт задача сделать однотипное действие много раз.

Например, вывести товары из списка один за другим. Или просто перебрать все числа от 1 до 10 и для каждого выполнить одинаковый код.

Для многократного повторения одного участка кода предусмотрены циклы.
 */

// Цикл «while» Цикл while имеет следующий синтаксис:

//    while (condition) {
//     код
//     также называемый "телом цикла"
//    }

// Код из тела цикла выполняется, пока условие condition истинно
// Одно выполнение тела цикла по-научному называется итерация

// Любое выражение или переменная может быть условием цикла, а не только сравнение: условие while вычисляется и преобразуется в логическое значение:
let i = 3;
while (i) { // когда i будет равно 0, условие станет ложным, и цикл остановится
	console.log(i);
	i--;
}

// Если тело цикла состоит лишь из одной инструкции, мы можем опустить фигурные скобки {…}:
let j = 5;
while (j) console.log(j--);
//------------------------------------------------------------------------------------------------------------------//

// Цикл «do…while»
// Проверку условия можно разместить под телом цикла, используя специальный синтаксис do..while:

//    do {
//    тело цикла
//   } while (condition);

//Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось хотя бы один раз, даже если условие окажется ложным

// Цикл сначала выполнит тело, а затем проверит условие condition, и пока его значение равно true, он будет выполняться снова и снова:
let a = 0;
do {
	console.log(a);
	a++;
} while (a < 3);

//====================================================================================================================//

// Цикл «for»

//  for (начало; условие; шаг) {
// ... тело цикла ...
//  }

//  Давайте разберёмся, что означает каждая часть, на примере. Цикл ниже выполняет console.log(i) для i от 0 до (но не включая) 3:

for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
	console.log(i);
}

/*
Рассмотрим работу конструкции for подробней:
1)начало	let i = 0	(Выполняется один раз при входе в цикл)
2)условие	i < 3	(Проверяется перед каждой итерацией цикла). Если оно вычислится в false, цикл остановится.
3)тело	console.log(i)	Выполняется если условие вычисляется в true.
4)шаг	i++	Выполняется после выполнения тела цикла на каждой итерации (перед проверкой условия).
*/

// То есть, начало выполняется один раз, а затем каждая итерация заключается в проверке условия, после которой выполняется тело и шаг

/*
Встроенное объявление переменной

В примере переменная счётчика i была объявлена прямо в цикле. Это так называемое «встроенное» объявление переменной. Такие переменные существуют только внутри цикла
*/

// Вместо объявления новой переменной мы можем использовать уже существующую:
let ii = 0;

for (ii = 0; ii < 3; ii++) { // используем существующую переменную
	console.log(`текущее значение переменной:${ii}`); // 0, 1, 2
}
console.log(ii); // 3, переменная доступна, т.к. была объявлена снаружи цикла

// ------------------------------------------------------------------------------------------------------------------//

// Пропуск частей «for»
// Любая часть for может быть пропущена.

// Для примера, мы можем пропустить начало если нам ничего не нужно делать перед стартом цикла

let i1 = 5; // мы уже имеем объявленную i с присвоенным значением

for (; i1 < 8; i1++) { // нет необходимости в "начале"
	console.log(i1); // 0, 1, 2
}

// Можно убрать и шаг Это сделает цикл аналогичным while (i < 10):
let i2 = 7;

for (; i2 < 10;) {
	console.log(i2++); // шаг пропиали в теле цикла
}

// А можно и вообще убрать всё, получив бесконечный цикл (При этом сами точки с запятой ; обязательно должны
// присутствовать, иначе будет ошибка синтаксиса)

//-------------------------------------------------------------------------------------------------------------------//

// Прерывание цикла: «break»

// Обычно цикл завершается при вычислении условия в false.
// Но мы можем выйти из цикла в любой момент с помощью специальной директивы break:
let num = 0;
for (; num < 5; num++) {
	console.log(num);
	if (num == 3) break; // Директива break полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на console.log
}
console.log(`работа окончена, ${num}`);

//---------------------------------------------------------------------------------------------------------------------//

// Переход к следующей итерации: директива continue
// При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true)

// Например, цикл ниже использует continue, чтобы выводить только нечётные значения:
for (let i = 0; i < 10; i++) {

	// если true, пропустить оставшуюся часть тела цикла
	if (i % 2 == 0) continue;

	console.log(i); // 1, затем 3, 5, 7, 9
}

// Нельзя использовать break/continue справа от оператора „?“
//============================================================

// Метки для break/continue

/* 
Бывает, нужно выйти одновременно из нескольких уровней цикла сразу.
Например, в коде ниже мы проходимся циклами по b и c
*/
let b;
let c;
firstFor: for (b = 1; b < 2; b++) { // метку(с двоеточием) можно размещать на отдельной строке (выше объявления цикла)

	for (c = 1; c < 3; c++) {

		console.log(`текушее значение кординат: (${b},${c})`);

		// Что если мы захотим перейти к `Значение на координатах (${b},${c})` (ниже) прямо отсюда?
		//break firstFor; // Вызов break firstFor в цикле ниже ищет ближайший внешний(родительский) цикл с такой меткой и	переходит в его конец (останавливает)
	}
}
console.log(`Значение на координатах (${b},${c})`);

// Директива continue также может быть использована с меткой. В этом случае управление перейдёт на следующую итерацию цикла с меткой.
//=====================================================================================================================//